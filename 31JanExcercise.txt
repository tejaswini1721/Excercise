Question 1: Given a pointer to the head node of a linked list, the task is to reverse the
linked list. We need to reverse the list by changing the links between nodes.
Examples:
Input: Head of following linked list
1->2->3->4->NULL
Output: Linked list should be changed to,
4->3->2->1->NULL
Input: Head of following linked list
1->2->3->4->5->NULL
Output: Linked list should be changed to,
5->4->3->2->1->NULL
Input: NULL
Output: NULL


Ans. 

#include <iostream>
using namespace std;
 

struct Node {
    int data;
    struct Node* next;
    Node(int data)
    {
        this->data = data;
        next = NULL;
    }
};
 
struct LinkedList {
    Node* head;
    LinkedList() { head = NULL; }
 
 
    void reverse()
    {
        // Initialize current, previous and
        // next pointers
        Node* current = head;
        Node *prev = NULL, *next = NULL;
 
        while (current != NULL) {
           
            next = current->next;
 
            
            current->next = prev;
 
         
            prev = current;
            current = next;
        }
        head = prev;
    }
 
   
    void print()
    {
        struct Node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
    }
 
    void push(int data)
    {
        Node* temp = new Node(data);
        temp->next = head;
        head = temp;
    }
};
 

int main()
{
   
    LinkedList ll;
    ll.push(20);
    ll.push(4);
    ll.push(15);
    ll.push(85);
 
    cout << "Given linked list\n";
    ll.print();
 
    ll.reverse();
 
    cout << "\nReversed Linked list \n";
    ll.print();
    return 0;
}

*********************************************************************************************

Question 2: Given a linked list of size N. The task is to reverse every k node (where k
is an input to the function) in the linked list.
Example 1:
Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5
Explanation:
The first 4 elements 1,2,2,4 are reversed first
and then the next 4 elements 5,6,7,8. Hence, the
resultant linked list is 4->2->2->1->8->7->6->5.


Ans.

#include <bits/stdc++.h> 
using namespace std; 

/* Link list node */
class Node 
{ 
	public: 
	int data; 
	Node* next; 
}; 


Node *reverse (Node *head, int k) 
{ 
	Node* current = head; 
	Node* next = NULL; 
	Node* prev = NULL; 
	int count = 0; 
	
	/*reverse first k nodes of the linked list */
	while (current != NULL && count < k) 
	{ 
		next = current->next; 
		current->next = prev; 
		prev = current; 
		current = next; 
		count++; 
	} 
	
	/* next is now a pointer to (k+1)th node 
	Recursively call for the list starting from current. 
	And make rest of the list as next of first node */
	if (next != NULL) 
	head->next = reverse(next, k); 

	/* prev is new head of the input list */
	return prev; 
} 



void push(Node** head_ref, int new_data) 
{ 
	/* allocate node */
	Node* new_node = new Node(); 

	/* put in the data */
	new_node->data = new_data; 

	/* link the old list off the new node */
	new_node->next = (*head_ref);	 

	/* move the head to point to the new node */
	(*head_ref) = new_node; 
} 


void printList(Node *node) 
{ 
	while (node != NULL) 
	{ 
		cout<<node->data<<" "; 
		node = node->next; 
	} 
} 


int main() 
{ 
	
	Node* head = NULL; 

	
	push(&head, 9); 
	push(&head, 8); 
	push(&head, 7); 
	push(&head, 6); 
	push(&head, 5); 
	push(&head, 4); 
	push(&head, 3); 
	push(&head, 2); 
	push(&head, 1);	 

	cout<<"Given linked list \n"; 
	printList(head); 
	head = reverse(head, 3); 

	cout<<"\nReversed Linked list \n"; 
	printList(head); 

	return(0); 
} 

*****************************************************************************************************

Question 3: Given a linked list of N nodes. The task is to check if the linked list has a
loop. Linked list can contain a self loop.
Example 1:
Input:
N = 3
value[] = {1,3,4}
x = 2
Output: True
Explanation: In above test case N = 3.
The linked list with nodes N = 3 is
given. Then value of x=2 is given which
means last node is connected with xth
node of linked list. Therefore, there
exists a loop.

Ans.

#include <bits/stdc++.h>
using namespace std;

/* Link list node */
struct Node {
	int data;
	struct Node* next;
};

void push(struct Node** head_ref, int new_data)
{
	/* allocate node */
	struct Node* new_node = new Node;

	/* put in the data */
	new_node->data = new_data;

	/* link the old list off the new node */
	new_node->next = (*head_ref);

	/* move the head to point to the new node */
	(*head_ref) = new_node;
}


bool detectLoop(struct Node* h)
{
	unordered_set<Node*> s;
	while (h != NULL) {
	
		if (s.find(h) != s.end())
			return true;

		
		s.insert(h);

		h = h->next;
	}

	return false;
}


int main()
{
	/* Start with the empty list */
	struct Node* head = NULL;

	push(&head, 20);
	push(&head, 4);
	push(&head, 15);
	push(&head, 10);

	/* Create a loop for testing */
	head->next->next->next->next = head;

	if (detectLoop(head))
		cout << "Loop found";
	else
		cout << "No Loop";

	return 0;
}


*****************************************************************************************************


Question 4: You are given a linked list of N nodes. Remove the loop from the linked
list, if present.
Note: X is the position of the node to which the last node is connected to. If it is 0,
then there is no loop.
Example 1:
Input:
N = 3
value[] = {1,3,4}
X = 2
Output: 1
Explanation: The link list looks like
1 -> 3 -> 4
^ |
|____|
A loop is present. If you remove it
successfully, the answer will be 1.


Ans.


#include <bits/stdc++.h>
using namespace std;

/* Link list node */
struct Node {
	int data;
	struct Node* next;
};



void removeLoop(struct Node*, struct Node*);


int detectAndRemoveLoop(struct Node* list)
{
	struct Node *slow_p = list, *fast_p = list;

	while (slow_p && fast_p && fast_p->next) 
	{
		slow_p = slow_p->next;
		fast_p = fast_p->next->next;

		/* If slow_p and fast_p meet at 
			some point then
		there is a loop */
		if (slow_p == fast_p) {
			removeLoop(slow_p, list);

			/* Return 1 to indicate that loop is found */
			return 1;
		}
	}

	/* Return 0 to indeciate that ther is no loop*/
	return 0;
}


loop_node --> Pointer to 
one of the loop nodes
head --> Pointer to the 
start node of the linked list */
void removeLoop(struct Node* loop_node, struct Node* head)
{
	struct Node* ptr1;
	struct Node* ptr2;

	/* Set a pointer to the beginning 
	of the Linked List and
	move it one by one to find the 
	first node which is
	part of the Linked List */
	ptr1 = head;
	while (1) {
		/* Now start a pointer from 
		loop_node and check if
	it ever reaches ptr2 */
		ptr2 = loop_node;
		while (ptr2->next != loop_node
			&& ptr2->next != ptr1)
			ptr2 = ptr2->next;

		/* If ptr2 reahced ptr1 
		then there is a loop. So
		break the loop */
		if (ptr2->next == ptr1)
			break;

		/* If ptr2 did't reach ptr1 
		then try the next node
		* after ptr1 */
		ptr1 = ptr1->next;
	}

	/* After the end of loop ptr2
	is the last node of the
	loop. So make next of ptr2 as NULL */
	ptr2->next = NULL;
}


void printList(struct Node* node)
{
	while (node != NULL) {
		cout << node->data << " ";
		node = node->next;
	}
}

struct Node* newNode(int key)
{
	struct Node* temp = new Node();
	temp->data = key;
	temp->next = NULL;
	return temp;
}


int main()
{
	struct Node* head = newNode(50);
	head->next = newNode(20);
	head->next->next = newNode(15);
	head->next->next->next = newNode(4);
	head->next->next->next->next = newNode(10);

	/* Create a loop for testing */
	head->next->next->next->next->next = head->next->next;

	detectAndRemoveLoop(head);

	cout << "Linked List after removing loop" << endl;

	printList(head);

	return 0;
}




*****************************************************************************************************

Question 5: Given a singly linked list consisting of N nodes. The task is to remove
duplicates (nodes with duplicate values) from the given list (if exists).
Note: Try not to use extra space. Expected time complexity is O(N). The nodes are
arranged in a sorted way.
Example 1:
Input:
LinkedList: 2->2->4->5
Output: 2 4 5
Explanation: In the given linked list
2 ->2 -> 4-> 5, only 2 occurs more
than 1 time.


Ans.

*****************************************************************************************

Question 6: Write a function that moves the last element to the front in a given Singly
Linked List. For example, if the given Linked List is 1->2->3->4->5, then the function
should change the list to 5->1->2->3->4.


#include <bits/stdc++.h> 
using namespace std; 


class Node 
{ 
	public: 
	int data; 
	Node *next; 
}; 


void moveToFront(Node **head_ref) 
{ 
	/* If linked list is empty, or 
	it contains only one node, 
	then nothing needs to be done, 
	simply return */
	if (*head_ref == NULL || (*head_ref)->next == NULL) 
		return; 

	/* Initialize second last 
	and last pointers */
	Node *secLast = NULL; 
	Node *last = *head_ref; 

	/*After this loop secLast contains 
	address of second last node and 
	last contains address of last node in Linked List */
	while (last->next != NULL) 
	{ 
		secLast = last; 
		last = last->next; 
	} 

	/* Set the next of second last as NULL */
	secLast->next = NULL; 

	/* Set next of last as head node */
	last->next = *head_ref; 

	/* Change the head pointer 
	to point to last node now */
	*head_ref = last; 
} 


at the beginning of Linked List */
void push(Node** head_ref, int new_data) 
{ 
	/* allocate node */
	Node* new_node = new Node(); 

	/* put in the data */
	new_node->data = new_data; 

	/* link the old list off the new node */
	new_node->next = (*head_ref); 

	/* move the head to point to the new node */
	(*head_ref) = new_node; 
} 



void printList(Node *node) 
{ 
	while(node != NULL) 
	{ 
		cout << node->data << " "; 
		node = node->next; 
	} 
} 


int main() 
{ 
	Node *start = NULL; 

	/* The constructed linked list is: 
	1->2->3->4->5 */
	push(&start, 5); 
	push(&start, 4); 
	push(&start, 3); 
	push(&start, 2); 
	push(&start, 1); 

	cout<<"Linked list before moving last to front\n"; 
	printList(start); 

	moveToFront(&start); 

	cout<<"\nLinked list after removing last to front\n"; 
	printList(start); 

	return 0; 
} 

**************************************************************************************************


